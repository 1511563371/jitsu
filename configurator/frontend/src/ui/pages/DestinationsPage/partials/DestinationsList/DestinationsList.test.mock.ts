export const mockDestinationsList = [
  {
    _comment:
      "We set up a test postgres database for you. It's hosted by us and has a 10,000 rows limitation. It's ok to try with service with it. However, don't use it in production setup. To reveal credentials, click on the 'Edit' button",
    _connectionTestOk: true,
    _formData: {
      mode: "stream" as const,
      pgdatabase: "db_n0h0s",
      pghost: "pg1.eventnative.com",
      pgpassword: "py9lgSQ3Txgy9y2f",
      pgport: 5432,
      pguser: "u_n0h0s",
    },
    _id: "demo_postgres",
    _mappings: null,
    _onlyKeys: ["n0h0s.0zf4ws", "n0h0s.0zf4ws", "n0h0s.0zf4ws", "n0h0s.0zf4ws"],
    _sources: [],
    _type: "postgres" as const,
    _uid: "jnpbw855i6rnlo3c9q0a8d",
  },
  {
    _id: "clickhouse",
    _uid: "8wpu5z8mq4xf6vl5g2wacb",
    _type: "clickhouse" as const,
    _mappings: { _keepUnmappedFields: true, _mappings: [] },
    _comment: null,
    _onlyKeys: [],
    _formData: {
      mode: "stream" as const,
      tableName: "events",
      ch_dsns_list: ["source1"],
      ch_cluster: "",
      ch_database: "database1",
    },
    _sources: [],
    _connectionTestOk: false,
    _connectionErrorMessage: "DSNs must have http:// or https:// prefix (#400)",
  },
  {
    _id: "facebook",
    _uid: "9sn5oyv020cje9uqyjupq",
    _type: "facebook" as const,
    _mappings: { _keepUnmappedFields: true, _mappings: [] },
    _comment: null,
    _onlyKeys: [],
    _formData: {
      mode: "stream" as const,
      tableName: "events",
      fbPixelId: "pixel_id_1",
      fbAccessToken: "access_token_fb",
    },
    _connectionTestOk: false,
    _connectionErrorMessage:
      "Access token is invalid: Invalid OAuth access token. (#400)",
  },
  {
    _id: "webhook",
    _uid: "gu1dl12x8wwq1cplm8wjm",
    _type: "webhook" as const,
    _mappings: { _keepUnmappedFields: true, _mappings: [] },
    _comment: null,
    _onlyKeys: [],
    _formData: {
      mode: "stream" as const,
      tableName: "events",
      url: "webhook_url",
      method: "GET",
      body: "{}",
      headers: [],
    },
    _connectionTestOk: true,
  },
  {
    _id: "snowflake",
    _uid: "9u6rnu7t9ircx84bacnuk",
    _type: "snowflake" as const,
    _mappings: { _keepUnmappedFields: true, _mappings: [] },
    _comment: null,
    _onlyKeys: [],
    _formData: {
      mode: "stream" as const,
      tableName: "events",
      snowflakeAccount: "account_sf",
      snowflakeWarehouse: "sf_warehouse",
      snowflakeDB: "sf_database",
      snowflakeSchema: "PUBLIC",
      snowflakeUsername: "taletski@jitsu.com",
      snowflakePassword: "sfpass",
      snowflakeStageName: "",
      snowflakeStageType: "s3",
      snowflakeJSONKey: '""',
      snowflakeGCSBucket: "",
      snowflakeS3Region: "us-west-1",
      snowflakeS3Bucket: "",
      snowflakeS3AccessKey: "",
      snowflakeS3SecretKey: "",
    },
    _connectionTestOk: false,
    _connectionErrorMessage:
      "260008 (08004): failed to connect to db. verify account name is correct. HTTP: 403, URL: https://account_sf.snowflakecomputing.com:443/session/v1/login-request?databaseName=sf_database&requestId=ab51e6fe-17f1-470e-9409-af8108405060&request_guid=bc609e54-1137-4173-9a8e-8bf99ec9b5ce&schemaName=PUBLIC&warehouse=sf_warehouse (#400)",
  },
  {
    _id: "google_analytics",
    _uid: "eq9728am8lj94pk33z5cz7",
    _type: "google_analytics" as const,
    _mappings: { _keepUnmappedFields: true, _mappings: [] },
    _comment: null,
    _onlyKeys: [],
    _formData: {
      mode: "stream" as const,
      tableName: "events",
      gaTrackingId: "ga_tracking_id",
    },
    _connectionTestOk: true,
  },
  {
    _id: "redshift",
    _uid: "mku34bi9obqczbv0i2g8t5",
    _type: "redshift" as const,
    _mappings: { _keepUnmappedFields: true, _mappings: [] },
    _comment: null,
    _onlyKeys: [],
    _formData: {
      mode: "stream" as const,
      tableName: "events",
      redshiftHost: "rs_host",
      redshiftDB: "rs_database",
      redshiftSchema: "public",
      redshiftUser: "taletski@jitsu.com",
      redshiftPassword: "rspass",
      redshiftUseHostedS3: false,
      redshiftS3Region: "us-west-1",
      redshiftS3Bucket: "",
      redshiftS3AccessKey: "",
      redshiftS3SecretKey: "",
    },
    _connectionTestOk: false,
    _connectionErrorMessage:
      "dial tcp: lookup rs_host on 172.26.0.2:53: no such host (#400)",
  },
  {
    _id: "bigquery",
    _uid: "azt6p5wwa1rjj7ibek66f",
    _type: "bigquery" as const,
    _mappings: { _keepUnmappedFields: true, _mappings: [] },
    _comment: null,
    _onlyKeys: [],
    $type: "BQConfig",
    _formData: {
      mode: "stream" as const,
      tableName: "events",
      bqProjectId: "bq_project_id",
      bqDataset: "default",
      bqJSONKey: '{\n    "key": "bq_access_key"\n}',
      bqGCSBucket: "",
    },
    _connectionTestOk: false,
    _connectionErrorMessage:
      "Error creating BigQuery client: bigquery: constructing client: missing 'type' field in credentials (#400)",
  },
];

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package geo

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA0535929DecodeGithubComjitsucomEventnativeGeo(in *jlexer.Lexer, out *MaxMindResolver) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA0535929EncodeGithubComjitsucomEventnativeGeo(out *jwriter.Writer, in MaxMindResolver) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MaxMindResolver) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA0535929EncodeGithubComjitsucomEventnativeGeo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MaxMindResolver) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA0535929EncodeGithubComjitsucomEventnativeGeo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MaxMindResolver) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA0535929DecodeGithubComjitsucomEventnativeGeo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MaxMindResolver) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA0535929DecodeGithubComjitsucomEventnativeGeo(l, v)
}
func easyjsonA0535929DecodeGithubComjitsucomEventnativeGeo1(in *jlexer.Lexer, out *DummyResolver) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA0535929EncodeGithubComjitsucomEventnativeGeo1(out *jwriter.Writer, in DummyResolver) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DummyResolver) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA0535929EncodeGithubComjitsucomEventnativeGeo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DummyResolver) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA0535929EncodeGithubComjitsucomEventnativeGeo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DummyResolver) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA0535929DecodeGithubComjitsucomEventnativeGeo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DummyResolver) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA0535929DecodeGithubComjitsucomEventnativeGeo1(l, v)
}
func easyjsonA0535929DecodeGithubComjitsucomEventnativeGeo2(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "country":
			out.Country = string(in.String())
		case "city":
			out.City = string(in.String())
		case "latitude":
			out.Lat = float64(in.Float64())
		case "longitude":
			out.Lon = float64(in.Float64())
		case "zip":
			out.Zip = string(in.String())
		case "region":
			out.Region = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA0535929EncodeGithubComjitsucomEventnativeGeo2(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Country != "" {
		const prefix string = ",\"country\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Country))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.Lat != 0 {
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lon))
	}
	if in.Zip != "" {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Zip))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA0535929EncodeGithubComjitsucomEventnativeGeo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA0535929EncodeGithubComjitsucomEventnativeGeo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA0535929DecodeGithubComjitsucomEventnativeGeo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA0535929DecodeGithubComjitsucomEventnativeGeo2(l, v)
}
